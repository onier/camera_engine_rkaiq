set(RELOCATED_HOST_DIR $ENV{AIQ_BUILD_HOST_DIR})

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR armv7l)

set(CMAKE_SKIP_RPATH TRUE)

set(CMAKE_C_FLAGS_DEBUG "" CACHE STRING "Debug CFLAGS")
set(CMAKE_CXX_FLAGS_DEBUG "" CACHE STRING "Debug CXXFLAGS")
set(CMAKE_C_FLAGS_RELEASE " -DNDEBUG" CACHE STRING "Release CFLAGS")
set(CMAKE_CXX_FLAGS_RELEASE " -DNDEBUG" CACHE STRING "Release CXXFLAGS")

set(CMAKE_C_FLAGS "-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -Os" CACHE STRING "Buildroot CFLAGS")
set(CMAKE_CXX_FLAGS "-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -Os" CACHE STRING "Buildroot CXXFLAGS")
set(CMAKE_EXE_LINKER_FLAGS "" CACHE STRING "Buildroot LDFLAGS for executables")

set(CMAKE_INSTALL_SO_NO_EXE 0)

set(CMAKE_PROGRAM_PATH "${RELOCATED_HOST_DIR}/bin")
set(CMAKE_SYSROOT "${RELOCATED_HOST_DIR}/arm-linux-gnueabihf/libc")
set(CMAKE_FIND_ROOT_PATH "${RELOCATED_HOST_DIR}/arm-linux-gnueabihf/libc")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(ENV{PKG_CONFIG_SYSROOT_DIR} "${RELOCATED_HOST_DIR}/arm-linux-gnueabihf/libc")

set(CMAKE_C_COMPILER "${RELOCATED_HOST_DIR}/bin/arm-linux-gnueabihf-gcc")
set(CMAKE_CXX_COMPILER "${RELOCATED_HOST_DIR}/bin/arm-linux-gnueabihf-g++")

set(TOOLCHAIN_PREFIX arm-linux-gnueabihf-)
set(TOOLCHAIN_TRIPLE arm-linux-gnueabihf)

set(CMAKE_C_FLAGS_INIT " -B${RELOCATED_HOST_DIR}/arm-linux-gnueabihf/bin")
set(CMAKE_CXX_FLAGS_INIT " -B${RELOCATED_HOST_DIR}/arm-linux-gnueabihf/bin")

set(gcc_toolchain "${RELOCATED_HOST_DIR}")
set(triple ${TOOLCHAIN_TRIPLE})
set(CMAKE_ASM_COMPILER clang)
set(CMAKE_ASM_COMPILER_TARGET ${triple})
set(CMAKE_C_COMPILER clang)
set(CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN ${gcc_toolchain})
set(CMAKE_C_COMPILER_TARGET ${triple})
set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN ${gcc_toolchain})
set(CMAKE_CXX_COMPILER_TARGET ${triple})

set(CMAKE_SHARED_LINKER_FLAGS "-fuse-ld=lld" CACHE INTERNAL "library linker flags")
set(CMAKE_EXE_LINKER_FLAGS "-fuse-ld=lld" CACHE INTERNAL "exectuable linker flags")
set(CMAKE_OBJCOPY "llvm-objcopy" CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL "llvm-size" CACHE INTERNAL "size tool")
set(CMAKE_NM "llvm-nm" CACHE INTERNAL "nm tool")
set(CMAKE_RANLIB "llvm-ranlib" CACHE INTERNAL "ranlib tool")
set(CMAKE_AR "llvm-ar" CACHE INTERNAL "ar tool")

#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -isystem=${CMAKE_SYSROOT}/usr/include")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -isystem=${CMAKE_SYSROOT}/usr/include")
